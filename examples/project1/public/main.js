/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/main.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "../../lib/dist/core/CfCore.js":
/*!******************************************************!*\
  !*** C:/Projects/cornflower/lib/dist/core/CfCore.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.DetachContextMenu = exports.CreateWebViewport = exports.ApplyDefaultStyle = void 0;\r\nconst CfUtils_1 = __webpack_require__(/*! ./CfUtils */ \"../../lib/dist/core/CfUtils.js\");\r\nconst CfWebRenderer_1 = __webpack_require__(/*! ./rendering/CfWebRenderer */ \"../../lib/dist/core/rendering/CfWebRenderer.js\");\r\nconst defaultCanvasName = \"cornflower_viewport_canvas\";\r\nfunction ApplyDefaultStyle() {\r\n    var html = document.getElementsByTagName(\"HTML\")[0];\r\n    var body = document.getElementsByTagName(\"BODY\")[0];\r\n    removeElementSpaces(html);\r\n    removeElementSpaces(body);\r\n    let canvasElement = document.getElementById(defaultCanvasName);\r\n    if (!!canvasElement) {\r\n        removeElementSpaces(canvasElement);\r\n    }\r\n}\r\nexports.ApplyDefaultStyle = ApplyDefaultStyle;\r\nfunction removeElementSpaces(el) {\r\n    el.style.width = \"100%\";\r\n    el.style.height = \"100%\";\r\n    el.style.padding = \"0\";\r\n    el.style.margin = \"0\";\r\n}\r\nfunction CreateWebViewport(component) {\r\n    // Set as the top element\r\n    component.isTopElement = true;\r\n    // Create the canvas element\r\n    const newCanvas = document.createElement('canvas');\r\n    newCanvas.id = defaultCanvasName;\r\n    document.body.appendChild(newCanvas);\r\n    // Get the 2d context\r\n    var ctx = newCanvas.getContext(\"2d\");\r\n    let webRenderer = new CfWebRenderer_1.default(ctx);\r\n    component.setRenderTarget(webRenderer, true);\r\n    component.takeSnapshot();\r\n    document.cornflower = {};\r\n    document.cornflower.rootComponent = component;\r\n    // Initial Positioning\r\n    component.positioningProperties.position = new CfUtils_1.CfNumericPosition(0, 0);\r\n    component.positioningProperties.size = new CfUtils_1.CfNumericSize(window.innerWidth, window.innerHeight);\r\n    // Misc\r\n    component.name = 'Viewport';\r\n    // Resize Handler\r\n    window.addEventListener('resize', resizeCanvas, false);\r\n    function resizeCanvas() {\r\n        newCanvas.width = window.innerWidth;\r\n        newCanvas.height = window.innerHeight;\r\n    }\r\n    resizeCanvas();\r\n    // Absolute mouse position on canvas\r\n    function handleMouseMove(canvas, event) {\r\n        const rect = canvas.getBoundingClientRect();\r\n        const x = event.clientX - rect.left;\r\n        const y = event.clientY - rect.top;\r\n        component.eventHandler(\"cfGlobalMouseMove\", new CfUtils_1.CfNumericPosition(x, y), true);\r\n    }\r\n    newCanvas.addEventListener('mousemove', function (e) {\r\n        handleMouseMove(newCanvas, e);\r\n    });\r\n    // All events handler\r\n    // From: https://stackoverflow.com/questions/27321672/listen-for-all-events-in-javascript/48388878\r\n    Object.keys(window).forEach(key => {\r\n        if (/^on/.test(key)) {\r\n            window.addEventListener(key.slice(2), event => {\r\n                component.eventHandler(key, event, true);\r\n            });\r\n        }\r\n    });\r\n    // Remove the Context Menu on Right Click\r\n    DetachContextMenu(component);\r\n    // Apply the CSS to remove any margin/padding\r\n    ApplyDefaultStyle();\r\n    component.renderAll();\r\n    return newCanvas;\r\n}\r\nexports.CreateWebViewport = CreateWebViewport;\r\nfunction DetachContextMenu(component) {\r\n    // Based On Radek Benkel's and dota2pro's answear:\r\n    // https://stackoverflow.com/questions/4909167/how-to-add-a-custom-right-click-menu-to-a-webpage\r\n    if (document.addEventListener) {\r\n        document.addEventListener('contextmenu', function (e) {\r\n            component.eventHandler(\"cfContextMenu\", e, true);\r\n            e.preventDefault();\r\n        }, false);\r\n    }\r\n    else {\r\n        if (document.attachEvent) {\r\n            document.attachEvent('oncontextmenu', function (e) {\r\n                component.eventHandler(\"cfContextMenu\", e, true);\r\n                window.event.returnValue = false;\r\n            });\r\n        }\r\n    }\r\n}\r\nexports.DetachContextMenu = DetachContextMenu;\r\n//# sourceMappingURL=CfCore.js.map\n\n//# sourceURL=webpack:///C:/Projects/cornflower/lib/dist/core/CfCore.js?");

/***/ }),

/***/ "../../lib/dist/core/CfUtils.js":
/*!*******************************************************!*\
  !*** C:/Projects/cornflower/lib/dist/core/CfUtils.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n//\r\n// CfUtils.ts\r\n// Cornflower Project\r\n// This file contains utility classes and enumerator used in the project\r\n//\r\n// Created by Felipe Durar\r\n//\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.CfMergeDeep = exports.CfGetSetter = exports.CfGetPrototypeFamily = exports.CfIsObject = exports.CfClone = exports.CfGenerateUuidV4 = exports.CfContainerPositioningProperties = exports.CfContainerPositioningModeValuePair = exports.CfContainerPositioningModeToString = exports.CfContainerPositioningMode = exports.CfAnchor = exports.CfSpaces = exports.CfDirection = exports.CfAlign = exports.CfRectangle = exports.CfFont = exports.CfRadius = exports.CfColor = exports.CfSize = exports.CfPosition = exports.CfNumericSize = exports.CfNumericPosition = void 0;\r\nclass CfNumericPosition {\r\n    constructor(x, y) {\r\n        this.x = 0;\r\n        this.y = 0;\r\n        if (x)\r\n            this.x = x;\r\n        if (y)\r\n            this.y = y;\r\n    }\r\n    sum(position) {\r\n        this.x += position.x;\r\n        this.y += position.y;\r\n        return this; //new CfPosition(this.x + position.x, this.y + position.y);\r\n    }\r\n}\r\nexports.CfNumericPosition = CfNumericPosition;\r\nclass CfNumericSize {\r\n    constructor(w, h) {\r\n        this.w = 0;\r\n        this.h = 0;\r\n        if (w)\r\n            this.w = w;\r\n        if (h)\r\n            this.h = h;\r\n    }\r\n    sum(size) {\r\n        this.w += size.w;\r\n        this.h += size.h;\r\n        return this;\r\n    }\r\n}\r\nexports.CfNumericSize = CfNumericSize;\r\nclass CfPosition {\r\n    constructor(x, y) {\r\n        this._x = \"0\";\r\n        this._y = \"0\";\r\n        if (x)\r\n            this.x = x;\r\n        if (y)\r\n            this.y = y;\r\n    }\r\n    get x() {\r\n        if (!!this._xGetter)\r\n            this._x = this._xGetter();\r\n        return this._x;\r\n    }\r\n    set x(value) {\r\n        if (!!this._xSetter)\r\n            this._xSetter();\r\n        this._x = value;\r\n    }\r\n    get y() {\r\n        if (!!this._yGetter)\r\n            this._y = this._yGetter();\r\n        return this._y;\r\n    }\r\n    set y(value) {\r\n        if (!!this._ySetter)\r\n            this._ySetter();\r\n        this._y = value;\r\n    }\r\n}\r\nexports.CfPosition = CfPosition;\r\nclass CfSize {\r\n    constructor(w, h) {\r\n        this._w = \"0\";\r\n        this._h = \"0\";\r\n        if (w)\r\n            this.w = w;\r\n        if (h)\r\n            this.h = h;\r\n    }\r\n    get w() {\r\n        if (!!this._wGetter)\r\n            this._w = this._wGetter();\r\n        return this._w;\r\n    }\r\n    set w(value) {\r\n        if (!!this._wSetter)\r\n            this._wSetter();\r\n        this._w = value;\r\n    }\r\n    get h() {\r\n        if (!!this._hGetter)\r\n            this._h = this._hGetter();\r\n        return this._h;\r\n    }\r\n    set h(value) {\r\n        if (!!this._hSetter)\r\n            this._hSetter();\r\n        this._h = value;\r\n    }\r\n}\r\nexports.CfSize = CfSize;\r\nclass CfColor {\r\n    constructor(r, g, b) {\r\n        this.r = 0;\r\n        this.g = 0;\r\n        this.b = 0;\r\n        if (r)\r\n            this.r = r;\r\n        if (g)\r\n            this.g = g;\r\n        if (b)\r\n            this.b = b;\r\n    }\r\n    _getCssColor() {\r\n        return `rgb(${this.r}, ${this.g}, ${this.b})`;\r\n    }\r\n    darken(factor) {\r\n        this.r -= (this.r * factor) / 100.0;\r\n        this.g -= (this.g * factor) / 100.0;\r\n        this.b -= (this.b * factor) / 100.0;\r\n        return this;\r\n    }\r\n}\r\nexports.CfColor = CfColor;\r\nclass CfRadius {\r\n    constructor(radius) {\r\n        this.tl = 0;\r\n        this.tr = 0;\r\n        this.br = 0;\r\n        this.bl = 0;\r\n        if (!!radius) {\r\n            this.tl = this.tr = this.br = this.bl = radius;\r\n        }\r\n    }\r\n}\r\nexports.CfRadius = CfRadius;\r\nclass CfFont {\r\n    constructor(size, fontFamilly) {\r\n        this.size = \"14px\";\r\n        this.fontFamilly = \"Arial\";\r\n        if (!!size)\r\n            this.size = size;\r\n        if (!!fontFamilly)\r\n            this.fontFamilly = fontFamilly;\r\n    }\r\n    _getCssFont() {\r\n        return `${this.size} ${this.fontFamilly}`;\r\n    }\r\n}\r\nexports.CfFont = CfFont;\r\nclass CfRectangle {\r\n    constructor(position, size) {\r\n        this.position = new CfNumericPosition();\r\n        this.size = new CfNumericSize();\r\n        if (!!position)\r\n            this.position = position;\r\n        if (!!size)\r\n            this.size = size;\r\n    }\r\n    intersectsWithPoint(position) {\r\n        return (position.x > this.position.x && position.y > this.position.y &&\r\n            position.x < this.position.x + this.size.w && position.y < this.position.y + this.size.h);\r\n    }\r\n}\r\nexports.CfRectangle = CfRectangle;\r\nvar CfAlign;\r\n(function (CfAlign) {\r\n    CfAlign[CfAlign[\"None\"] = 0] = \"None\";\r\n    CfAlign[CfAlign[\"Left\"] = 1] = \"Left\";\r\n    CfAlign[CfAlign[\"Right\"] = 2] = \"Right\";\r\n    CfAlign[CfAlign[\"Top\"] = 3] = \"Top\";\r\n    CfAlign[CfAlign[\"TopLeft\"] = 4] = \"TopLeft\";\r\n    CfAlign[CfAlign[\"TopRight\"] = 5] = \"TopRight\";\r\n    CfAlign[CfAlign[\"Bottom\"] = 6] = \"Bottom\";\r\n    CfAlign[CfAlign[\"BottomLeft\"] = 7] = \"BottomLeft\";\r\n    CfAlign[CfAlign[\"BottomRight\"] = 8] = \"BottomRight\";\r\n    CfAlign[CfAlign[\"Center\"] = 9] = \"Center\";\r\n})(CfAlign = exports.CfAlign || (exports.CfAlign = {}));\r\nvar CfDirection;\r\n(function (CfDirection) {\r\n    CfDirection[CfDirection[\"None\"] = 0] = \"None\";\r\n    CfDirection[CfDirection[\"Up\"] = 1] = \"Up\";\r\n    CfDirection[CfDirection[\"Down\"] = 2] = \"Down\";\r\n    CfDirection[CfDirection[\"Left\"] = 3] = \"Left\";\r\n    CfDirection[CfDirection[\"Right\"] = 4] = \"Right\";\r\n})(CfDirection = exports.CfDirection || (exports.CfDirection = {}));\r\nclass CfSpaces {\r\n    constructor(left, right, top, bottom) {\r\n        this.left = 0;\r\n        this.right = 0;\r\n        this.top = 0;\r\n        this.bottom = 0;\r\n        if (!!left)\r\n            this.left = left;\r\n        if (!!right)\r\n            this.right = right;\r\n        if (!!top)\r\n            this.top = top;\r\n        if (!!bottom)\r\n            this.bottom = bottom;\r\n    }\r\n}\r\nexports.CfSpaces = CfSpaces;\r\nclass CfAnchor {\r\n    constructor(left, right, top, bottom) {\r\n        this.left = false;\r\n        this.right = false;\r\n        this.top = false;\r\n        this.bottom = false;\r\n        if (!!left)\r\n            this.left = left;\r\n        if (!!right)\r\n            this.right = right;\r\n        if (!!top)\r\n            this.top = top;\r\n        if (!!bottom)\r\n            this.bottom = bottom;\r\n    }\r\n}\r\nexports.CfAnchor = CfAnchor;\r\nvar CfContainerPositioningMode;\r\n(function (CfContainerPositioningMode) {\r\n    CfContainerPositioningMode[CfContainerPositioningMode[\"Pixels\"] = 0] = \"Pixels\";\r\n    CfContainerPositioningMode[CfContainerPositioningMode[\"Percent\"] = 1] = \"Percent\";\r\n})(CfContainerPositioningMode = exports.CfContainerPositioningMode || (exports.CfContainerPositioningMode = {}));\r\nfunction CfContainerPositioningModeToString(posMode) {\r\n    switch (posMode) {\r\n        case CfContainerPositioningMode.Pixels:\r\n            return 'px';\r\n        case CfContainerPositioningMode.Percent:\r\n            return '%';\r\n        default:\r\n            return '';\r\n    }\r\n}\r\nexports.CfContainerPositioningModeToString = CfContainerPositioningModeToString;\r\nclass CfContainerPositioningModeValuePair {\r\n    constructor() {\r\n        this.mode = CfContainerPositioningMode.Pixels;\r\n        this.value = 0;\r\n        this.changed = false;\r\n    }\r\n    // Receives for example: \"15\", \"15%\"\", \"15px\" ...\r\n    parseValue(inValue) {\r\n        //debugger;\r\n        let value = \"\";\r\n        if (typeof inValue === 'string' || inValue instanceof String)\r\n            value = inValue;\r\n        else\r\n            value = inValue.toString();\r\n        if (value.length <= 0)\r\n            throw `Invalid Positioning \"${value}\" (Can't be empty)`;\r\n        if (isNaN(value[0]))\r\n            throw `Invalid Positioning \"${value}\" (Must begin with a number)`;\r\n        // Small tool function\r\n        let isValidUnitCharacter = (str) => {\r\n            return str.length === 1 && (str.match(/[a-z]/i) || str == '%');\r\n        };\r\n        let numericPart = \"\";\r\n        let unitPart = \"\";\r\n        // Get the numeric part\r\n        let i = 0;\r\n        for (; i < value.length; i++) {\r\n            if (!isNaN(value[i]))\r\n                numericPart += value[i];\r\n            else\r\n                break;\r\n        }\r\n        // Get the unit part\r\n        for (; i < value.length; i++) {\r\n            if (isValidUnitCharacter(value[i]))\r\n                unitPart += value[i];\r\n            else\r\n                throw `Invalid Positioning Unit \"${unitPart}\" (Character Validation)`;\r\n        }\r\n        // Unit Check\r\n        switch (unitPart.toLowerCase()) {\r\n            case '':\r\n                this.mode = CfContainerPositioningMode.Pixels;\r\n                break;\r\n            case 'px':\r\n                this.mode = CfContainerPositioningMode.Pixels;\r\n                break;\r\n            case '%':\r\n                this.mode = CfContainerPositioningMode.Percent;\r\n                break;\r\n            default:\r\n                throw `Invalid Positioning Unit \"${unitPart}\" (Unit Checking)`;\r\n        }\r\n        // Numeric Conversion\r\n        this.value = parseInt(numericPart);\r\n        if (isNaN(this.value))\r\n            throw `Unable to parse positioning value \"${numericPart}\"`;\r\n        this.changed = true;\r\n        return false;\r\n    }\r\n}\r\nexports.CfContainerPositioningModeValuePair = CfContainerPositioningModeValuePair;\r\nclass CfContainerPositioningProperties {\r\n    constructor() {\r\n        // This is the base position and size of the object and is ALWAYS represented in pixels\r\n        this.position = new CfNumericPosition();\r\n        this.size = new CfNumericSize();\r\n        this.x = new CfContainerPositioningModeValuePair();\r\n        this.y = new CfContainerPositioningModeValuePair();\r\n        this.w = new CfContainerPositioningModeValuePair();\r\n        this.h = new CfContainerPositioningModeValuePair();\r\n    }\r\n    AnyUsingPercent() {\r\n        return this.x.mode == CfContainerPositioningMode.Percent || this.y.mode == CfContainerPositioningMode.Percent\r\n            || this.w.mode == CfContainerPositioningMode.Percent || this.h.mode == CfContainerPositioningMode.Percent;\r\n    }\r\n}\r\nexports.CfContainerPositioningProperties = CfContainerPositioningProperties;\r\nfunction CfGenerateUuidV4() {\r\n    // Based on broofa's answear from this:\r\n    // https://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\r\n        return v.toString(16);\r\n    });\r\n}\r\nexports.CfGenerateUuidV4 = CfGenerateUuidV4;\r\nfunction CfClone(obj) {\r\n    // Based on A. Levy's answear from this:\r\n    // https://stackoverflow.com/questions/728360/how-do-i-correctly-clone-a-javascript-object\r\n    var copy;\r\n    // Handle the 3 simple types, and null or undefined\r\n    if (null == obj || \"object\" != typeof obj)\r\n        return obj;\r\n    // Handle Date\r\n    if (obj instanceof Date) {\r\n        copy = new Date();\r\n        copy.setTime(obj.getTime());\r\n        return copy;\r\n    }\r\n    // Handle Array\r\n    if (obj instanceof Array) {\r\n        copy = [];\r\n        for (var i = 0, len = obj.length; i < len; i++) {\r\n            copy[i] = CfClone(obj[i]);\r\n        }\r\n        return copy;\r\n    }\r\n    // Handle Object\r\n    if (obj instanceof Object) {\r\n        copy = {};\r\n        for (var attr in obj) {\r\n            if (obj.hasOwnProperty(attr))\r\n                copy[attr] = CfClone(obj[attr]);\r\n        }\r\n        return copy;\r\n    }\r\n    throw new Error(\"Unable to copy obj! Its type isn't supported.\");\r\n}\r\nexports.CfClone = CfClone;\r\nfunction CfIsObject(item) {\r\n    // Based on Salakar and Rubens Mariuzzo answear from this:\r\n    // https://stackoverflow.com/questions/27936772/how-to-deep-merge-instead-of-shallow-merge\r\n    return (item && typeof item === 'object' && !Array.isArray(item));\r\n}\r\nexports.CfIsObject = CfIsObject;\r\n// Returns all prototypes from the object class and all their extended classes\r\nfunction CfGetPrototypeFamily(obj) {\r\n    let prototypes = [];\r\n    //\r\n    let cObj = obj;\r\n    // This is just to limit the maximum amount of iterations in case something goes wrong\r\n    for (let c = 0; c < 10; c++) {\r\n        if (!cObj)\r\n            return prototypes;\r\n        cObj = Object.getPrototypeOf(cObj);\r\n        if (!!cObj)\r\n            prototypes.push(cObj);\r\n    }\r\n}\r\nexports.CfGetPrototypeFamily = CfGetPrototypeFamily;\r\n// Returns the setter function\r\nfunction CfGetSetter(obj, prop) {\r\n    // This is necessary because the getOwnPropertyDescriptor only gets the descriptor from a single class\r\n    // So to check if a setter exists in extended classes it's necessary to get all the prototypes and check agains each one\r\n    let protoFamily = CfGetPrototypeFamily(obj);\r\n    for (let cPrototype of protoFamily) {\r\n        if (!cPrototype)\r\n            continue;\r\n        let descriptor = Object.getOwnPropertyDescriptor(cPrototype, prop);\r\n        if (!descriptor)\r\n            continue;\r\n        return descriptor['set'];\r\n    }\r\n    return undefined;\r\n}\r\nexports.CfGetSetter = CfGetSetter;\r\nfunction CfMergeDeep(target, ...sources) {\r\n    // Based on Salakar and Rubens Mariuzzo answear from this but with some modification to accept setters:\r\n    // https://stackoverflow.com/questions/27936772/how-to-deep-merge-instead-of-shallow-merge\r\n    if (!sources.length)\r\n        return target;\r\n    const source = sources.shift();\r\n    if (CfIsObject(target) && CfIsObject(source)) {\r\n        for (const key in source) {\r\n            // Check if the objects's property is a setter (if CfGetSetter returns null it's not a setter)\r\n            let propSetter = CfGetSetter(target, key);\r\n            if (!!propSetter) {\r\n                // Setter (Object, but let the setter decide what to do)\r\n                propSetter.bind(target)(source[key]);\r\n            }\r\n            else if (CfIsObject(source[key])) {\r\n                // Object\r\n                if (!target[key])\r\n                    Object.assign(target, { [key]: {} });\r\n                CfMergeDeep(target[key], source[key]);\r\n            }\r\n            else {\r\n                // Value\r\n                Object.assign(target, { [key]: source[key] });\r\n            }\r\n        }\r\n    }\r\n    return CfMergeDeep(target, ...sources);\r\n}\r\nexports.CfMergeDeep = CfMergeDeep;\r\n//# sourceMappingURL=CfUtils.js.map\n\n//# sourceURL=webpack:///C:/Projects/cornflower/lib/dist/core/CfUtils.js?");

/***/ }),

/***/ "../../lib/dist/core/rendering/CfWebRenderer.js":
/*!***********************************************************************!*\
  !*** C:/Projects/cornflower/lib/dist/core/rendering/CfWebRenderer.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst CfUtils_1 = __webpack_require__(/*! ../CfUtils */ \"../../lib/dist/core/CfUtils.js\");\r\nclass CfWebRenderer {\r\n    constructor(ctx) {\r\n        this.context = ctx;\r\n    }\r\n    getDrawingContext() {\r\n        return this.context;\r\n    }\r\n    getDrawingContextType() {\r\n        return \"2d\";\r\n    }\r\n    _createRectanglePath(position, size, radius) {\r\n        if (!radius)\r\n            radius = new CfUtils_1.CfRadius(0);\r\n        // Based on: https://stackoverflow.com/questions/1255512/how-to-draw-a-rounded-rectangle-using-html-canvas\r\n        this.context.beginPath();\r\n        this.context.moveTo(position.x + radius.tl, position.y);\r\n        this.context.lineTo(position.x + size.w - radius.tr, position.y);\r\n        this.context.quadraticCurveTo(position.x + size.w, position.y, position.x + size.w, position.y + radius.tr);\r\n        this.context.lineTo(position.x + size.w, position.y + size.h - radius.br);\r\n        this.context.quadraticCurveTo(position.x + size.w, position.y + size.h, position.x + size.w - radius.br, position.y + size.h);\r\n        this.context.lineTo(position.x + radius.bl, position.y + size.h);\r\n        this.context.quadraticCurveTo(position.x, position.y + size.h, position.x, position.y + size.h - radius.bl);\r\n        this.context.lineTo(position.x, position.y + radius.tl);\r\n        this.context.quadraticCurveTo(position.x, position.y, position.x + radius.tl, position.y);\r\n        this.context.closePath();\r\n    }\r\n    drawRectangle(position, size, color, width, radius) {\r\n        if (!width)\r\n            width = 1;\r\n        this._createRectanglePath(position, size, radius);\r\n        this.context.lineWidth = width;\r\n        this.context.strokeStyle = color._getCssColor();\r\n        this.context.stroke();\r\n    }\r\n    fillRectangle(position, size, color, radius) {\r\n        this._createRectanglePath(position, size, radius);\r\n        this.context.fillStyle = color._getCssColor();\r\n        this.context.fill();\r\n    }\r\n    drawString(text, position, color, font) {\r\n        this.context.font = font._getCssFont();\r\n        this.context.strokeStyle = color._getCssColor();\r\n        this.context.strokeText(text, position.x, position.y);\r\n    }\r\n    fillString(text, position, color, font) {\r\n        this.context.font = font._getCssFont();\r\n        this.context.fillStyle = color._getCssColor();\r\n        this.context.fillText(text, position.x, position.y);\r\n    }\r\n    measureString(text, font) {\r\n        // Sample\r\n        // let metrics = ctx.measureText(text);\r\n        // let fontHeight = metrics.fontBoundingBoxAscent + metrics.fontBoundingBoxDescent;\r\n        // let actualHeight = metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent;\r\n        this.context.font = font._getCssFont();\r\n        let metrics = this.context.measureText(text);\r\n        return new CfUtils_1.CfNumericSize(metrics.width, -(metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent));\r\n    }\r\n    beforeRender() {\r\n        // Workaround for canvas blurry issue\r\n        // https://stackoverflow.com/questions/8696631/canvas-drawings-like-lines-are-blurry\r\n        this.context.translate(0.5, 0.5);\r\n    }\r\n    afterRender() {\r\n        this.context.translate(-0.5, -0.5);\r\n    }\r\n}\r\nexports.default = CfWebRenderer;\r\n//# sourceMappingURL=CfWebRenderer.js.map\n\n//# sourceURL=webpack:///C:/Projects/cornflower/lib/dist/core/rendering/CfWebRenderer.js?");

/***/ }),

/***/ "../../lib/src/components/CfButton.ts":
/*!*************************************************************!*\
  !*** C:/Projects/cornflower/lib/src/components/CfButton.ts ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst CfUtils_1 = __webpack_require__(/*! ../core/CfUtils */ \"../../lib/src/core/CfUtils.ts\");\r\nconst CfContainer_1 = __webpack_require__(/*! ./CfContainer */ \"../../lib/src/components/CfContainer.ts\");\r\nconst CfText_1 = __webpack_require__(/*! ./CfText */ \"../../lib/src/components/CfText.ts\");\r\nclass CfButton extends CfContainer_1.default {\r\n    constructor(...properties) {\r\n        super();\r\n        this.textComponent = new CfText_1.default();\r\n        this.textComponent.text = \"Button\";\r\n        this.textComponent.textColor = new CfUtils_1.CfColor(255, 255, 255);\r\n        this.textComponent.textFont = new CfUtils_1.CfFont('16px', 'Arial');\r\n        this.textComponent.align = CfUtils_1.CfAlign.Center;\r\n        this.addComponent(this.textComponent);\r\n        this.positioningProperties.size = new CfUtils_1.CfNumericSize(150, 30);\r\n        this.borderWidth = 0;\r\n        this.borderRadius = new CfUtils_1.CfRadius(3);\r\n        this.backgroundColor = new CfUtils_1.CfColor(40, 167, 69);\r\n        this.snapshotList.push('text', 'textColor', 'textFont');\r\n        this.applyArray(properties);\r\n        this.attachListeners();\r\n    }\r\n    attachListeners() {\r\n        let nColor = new CfUtils_1.CfColor(255, 255, 255);\r\n        this.onMouseEnter.addListener(() => {\r\n            if (!!this.snapshot.backgroundColor)\r\n                Object.assign(nColor, this.snapshot.backgroundColor);\r\n            this.backgroundColor = nColor.darken(10);\r\n            this.getRootComponent().renderAll();\r\n        });\r\n        this.onMouseLeave.addListener(() => {\r\n            if (!!this.snapshot.backgroundColor)\r\n                Object.assign(nColor, this.snapshot.backgroundColor);\r\n            this.backgroundColor = nColor;\r\n            this.getRootComponent().renderAll();\r\n        });\r\n        this.onMouseDown.addListener(() => {\r\n            if (!!this.snapshot.backgroundColor)\r\n                Object.assign(nColor, this.snapshot.backgroundColor);\r\n            this.backgroundColor = nColor.darken(30);\r\n            this.getRootComponent().renderAll();\r\n        });\r\n        this.onMouseUp.addListener(() => {\r\n            if (!!this.snapshot.backgroundColor)\r\n                Object.assign(nColor, this.snapshot.backgroundColor);\r\n            this.backgroundColor = nColor;\r\n            this.getRootComponent().renderAll();\r\n        });\r\n    }\r\n}\r\nexports.default = CfButton;\r\n\n\n//# sourceURL=webpack:///C:/Projects/cornflower/lib/src/components/CfButton.ts?");

/***/ }),

/***/ "../../lib/src/components/CfContainer.ts":
/*!****************************************************************!*\
  !*** C:/Projects/cornflower/lib/src/components/CfContainer.ts ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst CfComponent_1 = __webpack_require__(/*! ../core/CfComponent */ \"../../lib/src/core/CfComponent.ts\");\r\nconst CfEvent_1 = __webpack_require__(/*! ../core/CfEvent */ \"../../lib/src/core/CfEvent.ts\");\r\nconst CfUtils_1 = __webpack_require__(/*! ../core/CfUtils */ \"../../lib/src/core/CfUtils.ts\");\r\nclass CfContainer extends CfComponent_1.default {\r\n    constructor(...properties) {\r\n        super();\r\n        this.positioningProperties = new CfUtils_1.CfContainerPositioningProperties();\r\n        this.backgroundColor = new CfUtils_1.CfColor(255, 255, 255);\r\n        this.enableBackgroundColor = true;\r\n        this.borderColor = new CfUtils_1.CfColor(0, 0, 0);\r\n        this.borderWidth = 1;\r\n        this.borderRadius = new CfUtils_1.CfRadius(0);\r\n        this.enableBorder = true;\r\n        this.onMouseOver = new CfEvent_1.default(\"cfMouseOver\");\r\n        this.onMouseEnter = new CfEvent_1.default(\"cfMouseEnter\");\r\n        this.onLongMouseEnter = new CfEvent_1.default(\"cfLongMouseEnter\");\r\n        this.onMouseLeave = new CfEvent_1.default(\"cfMouseLeave\");\r\n        this.onLongMouseLeave = new CfEvent_1.default(\"cfLongMouseLeave\");\r\n        this.onMouseMove = new CfEvent_1.default(\"cfMouseMove\");\r\n        this.onMouseDown = new CfEvent_1.default(\"cfMouseDown\");\r\n        this.onMouseDownOut = new CfEvent_1.default(\"cfMouseDownOut\");\r\n        this.onMouseUp = new CfEvent_1.default(\"cfMouseUp\");\r\n        this.onMouseUpOut = new CfEvent_1.default(\"cfMouseUpOut\");\r\n        this.onClick = new CfEvent_1.default(\"cfClick\");\r\n        this.longMouseEnterTimeOut = null;\r\n        this.longMouseLeaveTimeOut = null;\r\n        this.lastMousePosition = new CfUtils_1.CfNumericPosition(0, 0);\r\n        this.lastLocalMousePosition = new CfUtils_1.CfNumericPosition(0, 0);\r\n        this.isMouseDown = false;\r\n        // Once this property is set you can't set the \"position\" property\r\n        // This property only takes effect if the parent component is based on a Container\r\n        this.align = CfUtils_1.CfAlign.None;\r\n        this.margin = new CfUtils_1.CfSpaces();\r\n        this.padding = new CfUtils_1.CfSpaces();\r\n        this.anchor = new CfUtils_1.CfAnchor();\r\n        this.elasticSize = true;\r\n        this.types.push('CfContainer');\r\n        this.eventTriggers.push(this.onMouseOver, this.onMouseEnter, this.onMouseLeave, this.onMouseMove, this.onMouseDown, this.onMouseUp, this.onClick, this.onLongMouseEnter, this.onLongMouseLeave, this.onMouseDownOut, this.onMouseUpOut);\r\n        this.snapshotList.push('positioningProperties', 'size', 'backgroundColor', 'borderColor', 'borderWidth', 'borderRadius');\r\n        this.applyArray(properties);\r\n    }\r\n    get position() {\r\n        let cNewCfPos = new CfUtils_1.CfPosition(this.positioningProperties.x.value.toString() + CfUtils_1.CfContainerPositioningModeToString(this.positioningProperties.x.mode), this.positioningProperties.y.value.toString() + CfUtils_1.CfContainerPositioningModeToString(this.positioningProperties.y.mode));\r\n        cNewCfPos._xGetter = () => this.positioningProperties.x.value;\r\n        cNewCfPos._xSetter = (value) => { this.positioningProperties.x.parseValue(value); };\r\n        cNewCfPos._yGetter = () => this.positioningProperties.y.value;\r\n        cNewCfPos._ySetter = (value) => { this.positioningProperties.y.parseValue(value); };\r\n        return cNewCfPos;\r\n    }\r\n    set position(value) {\r\n        this.positioningProperties.x.parseValue(value.x);\r\n        this.positioningProperties.y.parseValue(value.y);\r\n    }\r\n    get size() {\r\n        let cNewCfSz = new CfUtils_1.CfSize(this.positioningProperties.w.value.toString() + CfUtils_1.CfContainerPositioningModeToString(this.positioningProperties.w.mode), this.positioningProperties.h.value.toString() + CfUtils_1.CfContainerPositioningModeToString(this.positioningProperties.h.mode));\r\n        cNewCfSz._wGetter = () => this.positioningProperties.w.value;\r\n        cNewCfSz._wSetter = (value) => { this.positioningProperties.w.parseValue(value); };\r\n        cNewCfSz._hGetter = () => this.positioningProperties.h.value;\r\n        cNewCfSz._hSetter = (value) => { this.positioningProperties.h.parseValue(value); };\r\n        return cNewCfSz;\r\n    }\r\n    set size(value) {\r\n        this.positioningProperties.w.parseValue(value.w);\r\n        this.positioningProperties.h.parseValue(value.h);\r\n    }\r\n    preRender() {\r\n        // Compute sizes and position\r\n        if (this.positioningProperties.AnyUsingPercent() && !this.parent)\r\n            throw \"Unable to use percent relative position in orphan components\";\r\n        if (this.positioningProperties.w.mode == CfUtils_1.CfContainerPositioningMode.Percent)\r\n            this.positioningProperties.size.w = (this.parent.getInnerRectangle().size.w * this.positioningProperties.w.value) / 100.0;\r\n        else if (this.positioningProperties.w.mode == CfUtils_1.CfContainerPositioningMode.Pixels && this.positioningProperties.w.changed) {\r\n            this.positioningProperties.size.w = this.positioningProperties.w.value;\r\n            this.positioningProperties.w.changed = false;\r\n        }\r\n        if (this.positioningProperties.h.mode == CfUtils_1.CfContainerPositioningMode.Percent)\r\n            this.positioningProperties.size.h = (this.parent.getInnerRectangle().size.h * this.positioningProperties.h.value) / 100.0;\r\n        else if (this.positioningProperties.h.mode == CfUtils_1.CfContainerPositioningMode.Pixels && this.positioningProperties.h.changed) {\r\n            this.positioningProperties.size.h = this.positioningProperties.h.value;\r\n            this.positioningProperties.h.changed = false;\r\n        }\r\n        // Compute alignments\r\n        for (let cComponent of this.components) {\r\n            if (!cComponent.containsType('CfContainer'))\r\n                continue;\r\n            let cContainer = cComponent;\r\n            if (cContainer.align != CfUtils_1.CfAlign.None)\r\n                this.computeAlignment(cContainer);\r\n        }\r\n        // Values used\r\n        let cInnerRect = this.getInnerRectangle(true);\r\n        // Elastic Size\r\n        if (this.elasticSize) {\r\n            let cUsedArea = this.getUsedArea();\r\n            if (!!cUsedArea) {\r\n                if (cUsedArea.position.x + cUsedArea.size.w > cInnerRect.size.w)\r\n                    this.positioningProperties.size.w = this.padding.left + this.padding.right + cUsedArea.position.x + cUsedArea.size.w;\r\n                if (cUsedArea.position.y + cUsedArea.size.h > cInnerRect.size.h)\r\n                    this.positioningProperties.size.h = this.padding.top + this.padding.bottom + cUsedArea.position.y + cUsedArea.size.h;\r\n            }\r\n        }\r\n    }\r\n    computeAlignment(targetContainer) {\r\n        let cCompRect = this.getInnerRectangle(true);\r\n        let targetCompRect = targetContainer.getOuterRectangle(true);\r\n        switch (targetContainer.align) {\r\n            case CfUtils_1.CfAlign.Center:\r\n                targetContainer.positioningProperties.position = new CfUtils_1.CfNumericPosition((cCompRect.size.w / 2) - (targetCompRect.size.w / 2), (cCompRect.size.h / 2) - (targetCompRect.size.h / 2));\r\n                break;\r\n            case CfUtils_1.CfAlign.Top:\r\n                targetContainer.positioningProperties.position = new CfUtils_1.CfNumericPosition((cCompRect.size.w / 2) - (targetCompRect.size.w / 2), 0);\r\n                break;\r\n            case CfUtils_1.CfAlign.TopLeft:\r\n                targetContainer.positioningProperties.position = new CfUtils_1.CfNumericPosition(0, 0);\r\n                break;\r\n            case CfUtils_1.CfAlign.TopRight:\r\n                targetContainer.positioningProperties.position = new CfUtils_1.CfNumericPosition(cCompRect.size.w - targetCompRect.size.w, 0);\r\n                break;\r\n            case CfUtils_1.CfAlign.Bottom:\r\n                targetContainer.positioningProperties.position = new CfUtils_1.CfNumericPosition((cCompRect.size.w / 2) - (targetCompRect.size.w / 2), cCompRect.size.h - targetCompRect.size.h);\r\n                break;\r\n            case CfUtils_1.CfAlign.BottomLeft:\r\n                targetContainer.positioningProperties.position = new CfUtils_1.CfNumericPosition(0, cCompRect.size.h - targetCompRect.size.h);\r\n                break;\r\n            case CfUtils_1.CfAlign.BottomRight:\r\n                targetContainer.positioningProperties.position = new CfUtils_1.CfNumericPosition(cCompRect.size.w - targetCompRect.size.w, cCompRect.size.h - targetCompRect.size.h);\r\n                break;\r\n            case CfUtils_1.CfAlign.Left:\r\n                targetContainer.positioningProperties.position = new CfUtils_1.CfNumericPosition(0, (cCompRect.size.h / 2) - (targetCompRect.size.h / 2));\r\n                break;\r\n            case CfUtils_1.CfAlign.Right:\r\n                targetContainer.positioningProperties.position = new CfUtils_1.CfNumericPosition((cCompRect.size.w - targetCompRect.size.w), (cCompRect.size.h / 2) - (targetCompRect.size.h / 2));\r\n                break;\r\n        }\r\n    }\r\n    render() {\r\n        if (!this.renderTarget)\r\n            throw \"Undefined Render Target\";\r\n        let cRect = this.getRectangle();\r\n        if (cRect.size.w === 0 && cRect.size.h === 0)\r\n            return;\r\n        if (this.enableBackgroundColor)\r\n            this.renderTarget.fillRectangle(cRect.position, cRect.size, this.backgroundColor, this.borderRadius);\r\n        if (this.borderWidth != 0 && this.enableBorder)\r\n            this.renderTarget.drawRectangle(cRect.position, cRect.size, this.borderColor, this.borderWidth, this.borderRadius);\r\n    }\r\n    getRelativePosition() {\r\n        return new CfUtils_1.CfNumericPosition(this.positioningProperties.position.x, this.positioningProperties.position.y);\r\n    }\r\n    /**\r\n     * getAbsolutePosition:\r\n     * This function iterates with parent elements to calculate the position where the child should be rendered\r\n     * Since this component is a container, the position of child elements should consider also the margin and padding\r\n     * So this overload calculates these spacings\r\n     */\r\n    getAbsolutePosition() {\r\n        let cPosition = null;\r\n        if (!this.parent)\r\n            cPosition = new CfUtils_1.CfNumericPosition(0, 0);\r\n        else\r\n            cPosition = this.parent.getAbsolutePosition();\r\n        // Since this is a container, the subcontent should be drawn in the innerside (considering both the margin and padding)\r\n        // BE VERY CAREFULL HERE! If you try to get the non relative position it will cause stack overflow\r\n        let cRect = this.getInnerRectangle(true);\r\n        return cPosition.sum(cRect.position);\r\n    }\r\n    /**\r\n     * getOuterRectangle:\r\n     * Get the container rectangle without considering the margin\r\n     */\r\n    getOuterRectangle(relative = false) {\r\n        let cPos = new CfUtils_1.CfNumericPosition();\r\n        if (this.parent && !relative)\r\n            cPos = this.parent.getAbsolutePosition();\r\n        cPos.sum(this.getRelativePosition());\r\n        let cRect = new CfUtils_1.CfRectangle(cPos, new CfUtils_1.CfNumericSize(this.positioningProperties.size.w, this.positioningProperties.size.h));\r\n        cRect.size.sum(new CfUtils_1.CfNumericSize(this.margin.left + this.margin.right, this.margin.top + this.margin.bottom));\r\n        return cRect;\r\n    }\r\n    /**\r\n     * getRectangle\r\n     * Get the container rectangle considering the margin\r\n     */\r\n    getRectangle(relative = false) {\r\n        let cRect = this.getOuterRectangle(relative);\r\n        cRect.position.sum(new CfUtils_1.CfNumericPosition(this.margin.left, this.margin.top));\r\n        cRect.size.sum(new CfUtils_1.CfNumericSize(-(this.margin.left + this.margin.right), -(this.margin.top + this.margin.bottom)));\r\n        return cRect;\r\n    }\r\n    /**\r\n     * getInnerRectangle\r\n     * Get the container rectangle considering the margin and the padding\r\n     */\r\n    getInnerRectangle(relative = false) {\r\n        let cRect = this.getRectangle(relative);\r\n        cRect.position.sum(new CfUtils_1.CfNumericPosition(this.padding.left, this.padding.top));\r\n        cRect.size.sum(new CfUtils_1.CfNumericSize(-(this.padding.left + this.padding.right), -(this.padding.top + this.padding.bottom)));\r\n        return cRect;\r\n    }\r\n    getChildrenContainerComponents() {\r\n        return this.components\r\n            .filter(cComponent => cComponent.containsType('CfContainer'))\r\n            .map(cContainer => cContainer);\r\n    }\r\n    getUsedArea() {\r\n        // Check if there are children containers\r\n        let cContainers = this.getChildrenContainerComponents();\r\n        if (cContainers.length == 0)\r\n            return null; //new CfRectangle(new CfPosition(0, 0), new CfSize(0, 0));\r\n        // Ensure all the chilren positioning are correct\r\n        this.preRenderAll(true);\r\n        // Create the base rectangle cloning the first found container\r\n        let cRectangle = CfUtils_1.CfClone(cContainers[0].getOuterRectangle(true));\r\n        // Check each container\r\n        for (let cContainer of cContainers) {\r\n            let cTargetRect = cContainer.getOuterRectangle(true);\r\n            if (cTargetRect.position.x < cRectangle.position.x)\r\n                cRectangle.position.x = cTargetRect.position.x;\r\n            if (cTargetRect.position.y < cRectangle.position.y)\r\n                cRectangle.position.y = cTargetRect.position.y;\r\n            if (cTargetRect.position.x + cTargetRect.size.w > cRectangle.size.w)\r\n                cRectangle.size.w = cTargetRect.position.x + cTargetRect.size.w;\r\n            if (cTargetRect.position.y + cTargetRect.size.h > cRectangle.size.h)\r\n                cRectangle.size.h = cTargetRect.position.y + cTargetRect.size.h;\r\n        }\r\n        cRectangle.size.w -= cRectangle.position.x;\r\n        cRectangle.size.h -= cRectangle.position.y;\r\n        return cRectangle;\r\n    }\r\n    projectPositionToLocalPosition(position) {\r\n        let innerRect = this.getInnerRectangle();\r\n        return new CfUtils_1.CfNumericPosition(position.x - innerRect.position.x, position.y - innerRect.position.y);\r\n    }\r\n    eventHandler(eventName, eventArgs, propagate = true) {\r\n        super.eventHandler(eventName, eventArgs, propagate);\r\n        if (eventName.toLowerCase() == \"onresize\" && this.isTopElement) {\r\n            this.positioningProperties.size.w = window.innerWidth;\r\n            this.positioningProperties.size.h = window.innerHeight;\r\n            // This will iterate on all sub components\r\n            this.renderAll();\r\n        }\r\n        let cRect = this.getRectangle();\r\n        switch (eventName) {\r\n            case \"onmousedown\":\r\n                if (cRect.intersectsWithPoint(eventArgs)) {\r\n                    this.isMouseDown = true;\r\n                    this.eventHandler(\"cfMouseDown\", eventArgs, false);\r\n                }\r\n                else {\r\n                    this.eventHandler(\"cfMouseDownOut\", eventArgs, false);\r\n                }\r\n                break;\r\n            case \"onmouseup\":\r\n                if (this.isMouseDown) {\r\n                    this.isMouseDown = false;\r\n                    this.eventHandler(\"cfMouseUp\", eventArgs, false);\r\n                    this.eventHandler(\"cfClick\", eventArgs, false);\r\n                }\r\n                else {\r\n                    this.eventHandler(\"cfMouseUpOut\", eventArgs, false);\r\n                }\r\n                break;\r\n            case \"onmousemove\":\r\n                break;\r\n            case \"cfGlobalMouseMove\":\r\n                if (!cRect.intersectsWithPoint(this.lastMousePosition) && cRect.intersectsWithPoint(eventArgs)) {\r\n                    this.eventHandler(\"cfMouseEnter\", eventArgs, false);\r\n                }\r\n                else if (cRect.intersectsWithPoint(this.lastMousePosition) && !cRect.intersectsWithPoint(eventArgs)) {\r\n                    this.eventHandler(\"cfMouseLeave\", eventArgs, false);\r\n                }\r\n                if (cRect.intersectsWithPoint(eventArgs)) {\r\n                    this.eventHandler(\"cfMouseOver\", eventArgs, false);\r\n                    this.eventHandler(\"cfMouseMove\", eventArgs, false);\r\n                }\r\n                this.lastMousePosition = eventArgs;\r\n                break;\r\n            case \"cfMouseEnter\":\r\n                clearTimeout(this.longMouseLeaveTimeOut);\r\n                this.longMouseEnterTimeOut = setTimeout(() => {\r\n                    if (cRect.intersectsWithPoint(this.lastMousePosition)) {\r\n                        this.eventHandler(\"cfLongMouseEnter\", eventArgs, false);\r\n                        clearTimeout(this.longMouseEnterTimeOut);\r\n                    }\r\n                }, 500);\r\n                break;\r\n            case \"cfMouseLeave\":\r\n                clearTimeout(this.longMouseEnterTimeOut);\r\n                this.longMouseLeaveTimeOut = setTimeout(() => {\r\n                    if (cRect.intersectsWithPoint(this.lastMousePosition)) {\r\n                        this.eventHandler(\"cfLongMouseLeave\", eventArgs, false);\r\n                        clearTimeout(this.longMouseLeaveTimeOut);\r\n                    }\r\n                }, 500);\r\n                break;\r\n        }\r\n    }\r\n}\r\nexports.default = CfContainer;\r\n\n\n//# sourceURL=webpack:///C:/Projects/cornflower/lib/src/components/CfContainer.ts?");

/***/ }),

/***/ "../../lib/src/components/CfStackContainer.ts":
/*!*********************************************************************!*\
  !*** C:/Projects/cornflower/lib/src/components/CfStackContainer.ts ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst CfUtils_1 = __webpack_require__(/*! ../core/CfUtils */ \"../../lib/src/core/CfUtils.ts\");\r\nconst CfContainer_1 = __webpack_require__(/*! ./CfContainer */ \"../../lib/src/components/CfContainer.ts\");\r\nclass CfStackContainer extends CfContainer_1.default {\r\n    constructor(...properties) {\r\n        super();\r\n        this.stackDirection = CfUtils_1.CfDirection.Down;\r\n        this.enableBackgroundColor = false;\r\n        this.enableBorder = false;\r\n        this.positioningProperties.size = new CfUtils_1.CfNumericSize(1, 1);\r\n        this.applyArray(properties);\r\n    }\r\n    preRender() {\r\n        let positionAcc = 0;\r\n        let cContainers = this.getChildrenContainerComponents();\r\n        for (let cContainer of cContainers) {\r\n            switch (this.stackDirection) {\r\n                case CfUtils_1.CfDirection.Right:\r\n                    cContainer.positioningProperties.position.x = positionAcc;\r\n                    cContainer.positioningProperties.position.y = 0;\r\n                    positionAcc += cContainer.getOuterRectangle().size.w;\r\n                    break;\r\n                case CfUtils_1.CfDirection.Down:\r\n                    cContainer.positioningProperties.position.x = 0;\r\n                    cContainer.positioningProperties.position.y = positionAcc;\r\n                    positionAcc += cContainer.getOuterRectangle().size.h;\r\n                    break;\r\n            }\r\n        }\r\n        super.preRender();\r\n    }\r\n}\r\nexports.default = CfStackContainer;\r\n\n\n//# sourceURL=webpack:///C:/Projects/cornflower/lib/src/components/CfStackContainer.ts?");

/***/ }),

/***/ "../../lib/src/components/CfText.ts":
/*!***********************************************************!*\
  !*** C:/Projects/cornflower/lib/src/components/CfText.ts ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst CfUtils_1 = __webpack_require__(/*! ../core/CfUtils */ \"../../lib/src/core/CfUtils.ts\");\r\nconst CfContainer_1 = __webpack_require__(/*! ./CfContainer */ \"../../lib/src/components/CfContainer.ts\");\r\nclass CfText extends CfContainer_1.default {\r\n    constructor(...properties) {\r\n        super();\r\n        this.text = \"Button\";\r\n        this.textColor = new CfUtils_1.CfColor(0, 0, 0);\r\n        this.textFont = new CfUtils_1.CfFont('16px', 'Arial');\r\n        this.positioningProperties.size = new CfUtils_1.CfNumericSize(0, 0);\r\n        this.enableBackgroundColor = false;\r\n        this.enableBorder = false;\r\n        this.snapshotList.push('text', 'textColor', 'textFont');\r\n        this.applyArray(properties);\r\n    }\r\n    preRender() {\r\n        super.preRender();\r\n        this.positioningProperties.size = this.renderTarget.measureString(this.text, this.textFont);\r\n    }\r\n    render() {\r\n        // This will render the background\r\n        super.render();\r\n        let absPosition = this.getInnerRectangle().position;\r\n        //let txtSize: CfSize = this.renderTarget.measureString(this.text, this.textFont);\r\n        // let posX = absPosition.x + ((this.size.w / 2) - (txtSize.w / 2));\r\n        // let posY = absPosition.y + ((this.size.h / 2) + (txtSize.h / 2));\r\n        this.renderTarget.fillString(this.text, absPosition, this.textColor, this.textFont);\r\n    }\r\n}\r\nexports.default = CfText;\r\n\n\n//# sourceURL=webpack:///C:/Projects/cornflower/lib/src/components/CfText.ts?");

/***/ }),

/***/ "../../lib/src/components/menus/CfContextMenu.ts":
/*!************************************************************************!*\
  !*** C:/Projects/cornflower/lib/src/components/menus/CfContextMenu.ts ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst CfUtils_1 = __webpack_require__(/*! ../../core/CfUtils */ \"../../lib/src/core/CfUtils.ts\");\r\nconst CfButton_1 = __webpack_require__(/*! ../CfButton */ \"../../lib/src/components/CfButton.ts\");\r\nconst CfStackContainer_1 = __webpack_require__(/*! ../CfStackContainer */ \"../../lib/src/components/CfStackContainer.ts\");\r\nclass CfContextMenu extends CfStackContainer_1.default {\r\n    constructor(...properties) {\r\n        super();\r\n        this.menuItems = [];\r\n        // This only works when using the default menuItemFactory\r\n        this.menuItemProperties = {};\r\n        this._baseMenuItemProperties = {};\r\n        this.isRootContextMenu = true;\r\n        this.closeOnClickOut = true;\r\n        this.types.push('CfContextMenu');\r\n        this.enabled = false;\r\n        this.enableBackgroundColor = true;\r\n        this.backgroundColor = new CfUtils_1.CfColor(25, 25, 25);\r\n        this.padding = new CfUtils_1.CfSpaces(2, 2, 2, 2);\r\n        this._baseMenuItemProperties = {\r\n            backgroundColor: new CfUtils_1.CfColor(40, 40, 40),\r\n            size: new CfUtils_1.CfSize('150', '24'),\r\n            textComponent: {\r\n                align: CfUtils_1.CfAlign.Left,\r\n                margin: { left: 10 },\r\n                textFont: { size: '12px' }\r\n            }\r\n        };\r\n        this.menuItemFactory = this.defaultMenuItemFactory;\r\n        this.applyArray(properties);\r\n    }\r\n    addItem(item) {\r\n        this.menuItems.push(item);\r\n        let cComponent = this.menuItemFactory(item);\r\n        this.addComponent(cComponent);\r\n    }\r\n    addItems(items) {\r\n        for (let cMenuItem of items)\r\n            this.addItem(cMenuItem);\r\n    }\r\n    clearItems() {\r\n        this.components = [];\r\n        this.menuItems = [];\r\n    }\r\n    show(position) {\r\n        if (!!position)\r\n            this.position = position;\r\n        if (!!this.currentSubMenu)\r\n            this.currentSubMenu.hide();\r\n        this.enabled = true;\r\n        this.getRootComponent().renderAll();\r\n    }\r\n    hide() {\r\n        if (!!this.currentSubMenu)\r\n            this.currentSubMenu.hide();\r\n        this.enabled = false;\r\n        this.getRootComponent().renderAll();\r\n    }\r\n    defaultMenuItemFactory(menuItem) {\r\n        let ctxMenuBtn = new CfButton_1.default({\r\n            textComponent: { text: menuItem.text }\r\n        }, this._baseMenuItemProperties, this.menuItemProperties, { menuItem: menuItem } // Add also the menu item\r\n        );\r\n        ctxMenuBtn.onLongMouseEnter.addListener(() => {\r\n            if (!!this.currentSubMenu) {\r\n                this.currentSubMenu.hide();\r\n                this.parent.removeByInstanceId(this.currentSubMenu.instanceId);\r\n                this.currentSubMenu = undefined;\r\n            }\r\n            if (menuItem.subitems.length > 0) {\r\n                this.showContextMenuForSubItem(menuItem, ctxMenuBtn);\r\n            }\r\n        });\r\n        ctxMenuBtn.onLongMouseLeave.addListener(() => {\r\n            if (!!this.currentSubMenu) {\r\n                this.currentSubMenu.hide();\r\n                this.parent.removeByInstanceId(this.currentSubMenu.instanceId);\r\n                this.currentSubMenu = undefined;\r\n            }\r\n        });\r\n        return ctxMenuBtn;\r\n    }\r\n    showContextMenuForSubItem(menuItem, ctxMenuBtn) {\r\n        this.currentSubMenu = new CfContextMenu(this._baseMenuItemProperties, { menuItemProperties: this.menuItemProperties, isRootContextMenu: false });\r\n        this.currentSubMenu.addItems(menuItem.subitems);\r\n        this.currentSubMenu.parentMenu = this;\r\n        this.parent.addComponent(this.currentSubMenu);\r\n        let cOuterBtnRect = ctxMenuBtn.getOuterRectangle(false);\r\n        this.currentSubMenu.positioningProperties.position =\r\n            new CfUtils_1.CfNumericPosition(cOuterBtnRect.position.x + cOuterBtnRect.size.w, cOuterBtnRect.position.y);\r\n        this.currentSubMenu.show();\r\n    }\r\n    eventHandler(eventName, eventArgs, propagate = true) {\r\n        super.eventHandler(eventName, eventArgs, propagate);\r\n        let cChildrenRects = this.getChildrenSubmenuRectanglesAndSelfRectangle();\r\n        if (!!this.parentMenu) {\r\n            cChildrenRects.push(this.parentMenu.getRectangle());\r\n        }\r\n        if (!this.enabled || !this.isRootContextMenu || !this.closeOnClickOut) {\r\n            return;\r\n        }\r\n        switch (eventName) {\r\n            case \"onmousedown\":\r\n                if (!cChildrenRects.some(cRect => {\r\n                    if (cRect.intersectsWithPoint(eventArgs)) {\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                })) {\r\n                    this.hide();\r\n                    if (!!this.parent) {\r\n                        this.parent.removeByInstanceId(this.instanceId);\r\n                        if (!!this.parentMenu) {\r\n                            if (this.parentMenu.containsType('CfContextMenu')) {\r\n                                this.parentMenu.currentSubMenu = undefined;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n        }\r\n    }\r\n    getChildrenSubmenuRectanglesAndSelfRectangle() {\r\n        if (!!this.currentSubMenu) {\r\n            if (this.currentSubMenu.enabled) {\r\n                let childrenRects = this.currentSubMenu.getChildrenSubmenuRectanglesAndSelfRectangle();\r\n                return [this.getRectangle(), ...childrenRects];\r\n            }\r\n        }\r\n        return [this.getRectangle()];\r\n    }\r\n}\r\nexports.default = CfContextMenu;\r\n\n\n//# sourceURL=webpack:///C:/Projects/cornflower/lib/src/components/menus/CfContextMenu.ts?");

/***/ }),

/***/ "../../lib/src/components/menus/CfMenuBar.ts":
/*!********************************************************************!*\
  !*** C:/Projects/cornflower/lib/src/components/menus/CfMenuBar.ts ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst CfUtils_1 = __webpack_require__(/*! ../../core/CfUtils */ \"../../lib/src/core/CfUtils.ts\");\r\nconst CfButton_1 = __webpack_require__(/*! ../CfButton */ \"../../lib/src/components/CfButton.ts\");\r\nconst CfContextMenu_1 = __webpack_require__(/*! ./CfContextMenu */ \"../../lib/src/components/menus/CfContextMenu.ts\");\r\nclass CfMenuBar extends CfContextMenu_1.default {\r\n    constructor(...properties) {\r\n        super();\r\n        this.enabled = true;\r\n        this.position = new CfUtils_1.CfPosition('0', '0');\r\n        this.size = new CfUtils_1.CfSize('100%', '1');\r\n        this.stackDirection = CfUtils_1.CfDirection.Right;\r\n        this.enableBackgroundColor = true;\r\n        this.padding = new CfUtils_1.CfSpaces(0, 0, 0, 0);\r\n        this.closeOnClickOut = false;\r\n        this._baseMenuItemProperties = {\r\n            backgroundColor: new CfUtils_1.CfColor(40, 40, 40),\r\n            size: new CfUtils_1.CfSize('50', '24'),\r\n            textComponent: {\r\n                align: CfUtils_1.CfAlign.Left,\r\n                margin: { left: 10 },\r\n                textFont: { size: '12px' }\r\n            }\r\n        };\r\n        this.menuItemFactory = this.defaultMenuBarItemFactory;\r\n        this.applyArray(properties);\r\n    }\r\n    defaultMenuBarItemFactory(menuItem) {\r\n        let ctxMenuBtn = new CfButton_1.default({\r\n            textComponent: { text: menuItem.text }\r\n        }, this._baseMenuItemProperties, this.menuItemProperties, { menuItem: menuItem } // Add also the menu item\r\n        );\r\n        ctxMenuBtn.onMouseDown.addListener(() => {\r\n            if (!!this.currentSubMenu) {\r\n                this.currentSubMenu.hide();\r\n                this.parent.removeByInstanceId(this.currentSubMenu.instanceId);\r\n                this.currentSubMenu = undefined;\r\n            }\r\n            if (menuItem.subitems.length > 0) {\r\n                this.showContextMenuForSubItem(menuItem, ctxMenuBtn);\r\n            }\r\n        });\r\n        ctxMenuBtn.onMouseEnter.addListener(() => {\r\n            if (!!this.currentSubMenu) {\r\n                this.currentSubMenu.hide();\r\n                this.parent.removeByInstanceId(this.currentSubMenu.instanceId);\r\n                this.currentSubMenu = undefined;\r\n                if (menuItem.subitems.length > 0) {\r\n                    this.showContextMenuForSubItem(menuItem, ctxMenuBtn);\r\n                }\r\n            }\r\n        });\r\n        ctxMenuBtn.onLongMouseLeave.addListener(() => {\r\n            if (!!this.currentSubMenu) {\r\n                this.currentSubMenu.hide();\r\n                this.parent.removeByInstanceId(this.currentSubMenu.instanceId);\r\n                this.currentSubMenu = undefined;\r\n            }\r\n        });\r\n        return ctxMenuBtn;\r\n    }\r\n    showContextMenuForSubItem(menuItem, ctxMenuBtn) {\r\n        this.currentSubMenu = new CfContextMenu_1.default(this._baseMenuItemProperties, { menuItemProperties: this.menuItemProperties, isRootContextMenu: true });\r\n        this.currentSubMenu.addItems(menuItem.subitems);\r\n        this.currentSubMenu.parentMenu = this;\r\n        this.parent.addComponent(this.currentSubMenu);\r\n        let cOuterBtnRect = ctxMenuBtn.getOuterRectangle(false);\r\n        this.currentSubMenu.positioningProperties.position =\r\n            new CfUtils_1.CfNumericPosition(cOuterBtnRect.position.x, cOuterBtnRect.position.y + cOuterBtnRect.size.h);\r\n        this.currentSubMenu.show();\r\n    }\r\n}\r\nexports.default = CfMenuBar;\r\n\n\n//# sourceURL=webpack:///C:/Projects/cornflower/lib/src/components/menus/CfMenuBar.ts?");

/***/ }),

/***/ "../../lib/src/core/CfComponent.ts":
/*!**********************************************************!*\
  !*** C:/Projects/cornflower/lib/src/core/CfComponent.ts ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst CfUtils_1 = __webpack_require__(/*! ./CfUtils */ \"../../lib/src/core/CfUtils.ts\");\r\nclass CfComponent {\r\n    constructor(...properties) {\r\n        this.instanceId = '';\r\n        this.name = 'Untitled';\r\n        this.enabled = true;\r\n        this.isTopElement = false;\r\n        this.components = [];\r\n        this.eventTriggers = [];\r\n        this.snapshot = {};\r\n        this.snapshotList = [];\r\n        this.types = ['CfComponent'];\r\n        this.applyArray(properties);\r\n        //\r\n        this.instanceId = CfUtils_1.CfGenerateUuidV4();\r\n    }\r\n    /**\r\n     * renderAll:\r\n     * Renders this component and then all their children BUT NOT THEIR PARENT\r\n     * First this function calls the preRenderAll to prepare all the layouts before rendering\r\n     */\r\n    renderAll(subsequent = false) {\r\n        if (!this.renderTarget || !this.enabled)\r\n            return;\r\n        if (!subsequent) {\r\n            this.preRenderAll();\r\n            this.renderTarget.beforeRender();\r\n        }\r\n        this.render();\r\n        for (let cComponent of this.components) {\r\n            if (!cComponent.enabled)\r\n                continue;\r\n            cComponent.renderAll(true);\r\n        }\r\n        if (!subsequent) {\r\n            this.renderTarget.afterRender();\r\n        }\r\n    }\r\n    /**\r\n     * preRenderAll:\r\n     * Calls the preRenderAll of all their children (causing recursion) and then the preRender from itself\r\n     * Notice that this order is very important to correctly calculate the layout positioning and constraints from further components\r\n     */\r\n    preRenderAll(childrenOnly = false) {\r\n        if (!this.renderTarget)\r\n            return;\r\n        for (let cComponent of this.components) {\r\n            cComponent.preRenderAll();\r\n        }\r\n        if (!childrenOnly)\r\n            this.preRender();\r\n    }\r\n    /**\r\n     * addComponent:\r\n     * Add a component into this component\r\n     * This function also sets the parent and render target of the component and also takes a snapshot of the component being added\r\n     */\r\n    addComponent(component) {\r\n        component.parent = this;\r\n        //component.renderTarget = this.renderTarget;\r\n        component.setRenderTarget(this.renderTarget, true);\r\n        component.takeSnapshot();\r\n        this.components.push(component);\r\n    }\r\n    /**\r\n     * takeSnapshot:\r\n     * Copy the values of the properties of the component listed in the \"snapshotList\" array to the \"snapshot\" object\r\n     * At runtime some properties changes and the original state is sometimes necessary\r\n     */\r\n    takeSnapshot(propagate = false) {\r\n        // Stores the original state of this component\r\n        // Copy every attribute from this object where the name is in snapshotList to the snapshot object\r\n        for (var attr in this) {\r\n            if (this.hasOwnProperty(attr)) {\r\n                if (this.snapshotList.some(cAttrName => cAttrName == attr)) {\r\n                    this.snapshot[attr] = this[attr];\r\n                }\r\n            }\r\n        }\r\n        // Propagate it\r\n        if (propagate) {\r\n            for (let cComponent of this.components) {\r\n                cComponent.takeSnapshot(propagate);\r\n            }\r\n        }\r\n    }\r\n    eventHandler(eventName, eventArgs, propagate = true) {\r\n        // Check if there is any trigger\r\n        for (let cTrigger of this.eventTriggers) {\r\n            if (cTrigger.trigger == eventName) {\r\n                cTrigger.emit(eventArgs);\r\n            }\r\n        }\r\n        // Propagate the events\r\n        if (propagate) {\r\n            for (let cComponent of this.components) {\r\n                if (!cComponent.enabled)\r\n                    continue;\r\n                cComponent.eventHandler(eventName, eventArgs);\r\n            }\r\n        }\r\n    }\r\n    setRenderTarget(renderTarget, recursive = false) {\r\n        this.renderTarget = renderTarget;\r\n        if (recursive) {\r\n            for (let cComponent of this.components) {\r\n                cComponent.setRenderTarget(renderTarget, recursive);\r\n            }\r\n        }\r\n    }\r\n    containsType(type) {\r\n        return this.types.some(x => x == type);\r\n    }\r\n    getNamePath() {\r\n        if (!!this.parent)\r\n            return `${this.parent.getNamePath()}/${this.name}`;\r\n        else\r\n            return this.name;\r\n    }\r\n    apply(...args) {\r\n        this.applyArray(args);\r\n    }\r\n    applyArray(args) {\r\n        for (let cPartial of args) {\r\n            if (!!cPartial)\r\n                CfUtils_1.CfMergeDeep(this, cPartial);\r\n        }\r\n        //this.takeSnapshot(true);\r\n    }\r\n    getRootComponent() {\r\n        if (!this.parent)\r\n            return this;\r\n        return this.parent.getRootComponent();\r\n    }\r\n    getByInstanceId(instId) {\r\n        let cCompsFound = this.components.filter(cComp => cComp.instanceId = instId);\r\n        if (cCompsFound.length !== 1)\r\n            return null;\r\n        return cCompsFound[0];\r\n    }\r\n    removeByInstanceId(instId) {\r\n        for (let i = 0; i < this.components.length; i++) {\r\n            if (this.components[i].instanceId == instId) {\r\n                this.components.splice(i, 1);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n}\r\nexports.default = CfComponent;\r\n\n\n//# sourceURL=webpack:///C:/Projects/cornflower/lib/src/core/CfComponent.ts?");

/***/ }),

/***/ "../../lib/src/core/CfEvent.ts":
/*!******************************************************!*\
  !*** C:/Projects/cornflower/lib/src/core/CfEvent.ts ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nclass CfEvent {\r\n    constructor(trigger) {\r\n        this.trigger = 'event';\r\n        this.propagate = false;\r\n        this.listeners = [];\r\n        this.trigger = trigger;\r\n    }\r\n    addListener(callback) {\r\n        this.listeners.push(callback);\r\n    }\r\n    emit(data) {\r\n        for (let cListener of this.listeners) {\r\n            cListener(data);\r\n        }\r\n    }\r\n}\r\nexports.default = CfEvent;\r\n\n\n//# sourceURL=webpack:///C:/Projects/cornflower/lib/src/core/CfEvent.ts?");

/***/ }),

/***/ "../../lib/src/core/CfUtils.ts":
/*!******************************************************!*\
  !*** C:/Projects/cornflower/lib/src/core/CfUtils.ts ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n//\r\n// CfUtils.ts\r\n// Cornflower Project\r\n// This file contains utility classes and enumerator used in the project\r\n//\r\n// Created by Felipe Durar\r\n//\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.CfMergeDeep = exports.CfGetSetter = exports.CfGetPrototypeFamily = exports.CfIsObject = exports.CfClone = exports.CfGenerateUuidV4 = exports.CfContainerPositioningProperties = exports.CfContainerPositioningModeValuePair = exports.CfContainerPositioningModeToString = exports.CfContainerPositioningMode = exports.CfAnchor = exports.CfSpaces = exports.CfDirection = exports.CfAlign = exports.CfRectangle = exports.CfFont = exports.CfRadius = exports.CfColor = exports.CfSize = exports.CfPosition = exports.CfNumericSize = exports.CfNumericPosition = void 0;\r\nclass CfNumericPosition {\r\n    constructor(x, y) {\r\n        this.x = 0;\r\n        this.y = 0;\r\n        if (x)\r\n            this.x = x;\r\n        if (y)\r\n            this.y = y;\r\n    }\r\n    sum(position) {\r\n        this.x += position.x;\r\n        this.y += position.y;\r\n        return this; //new CfPosition(this.x + position.x, this.y + position.y);\r\n    }\r\n}\r\nexports.CfNumericPosition = CfNumericPosition;\r\nclass CfNumericSize {\r\n    constructor(w, h) {\r\n        this.w = 0;\r\n        this.h = 0;\r\n        if (w)\r\n            this.w = w;\r\n        if (h)\r\n            this.h = h;\r\n    }\r\n    sum(size) {\r\n        this.w += size.w;\r\n        this.h += size.h;\r\n        return this;\r\n    }\r\n}\r\nexports.CfNumericSize = CfNumericSize;\r\nclass CfPosition {\r\n    constructor(x, y) {\r\n        this._x = \"0\";\r\n        this._y = \"0\";\r\n        if (x)\r\n            this.x = x;\r\n        if (y)\r\n            this.y = y;\r\n    }\r\n    get x() {\r\n        if (!!this._xGetter)\r\n            this._x = this._xGetter();\r\n        return this._x;\r\n    }\r\n    set x(value) {\r\n        if (!!this._xSetter)\r\n            this._xSetter();\r\n        this._x = value;\r\n    }\r\n    get y() {\r\n        if (!!this._yGetter)\r\n            this._y = this._yGetter();\r\n        return this._y;\r\n    }\r\n    set y(value) {\r\n        if (!!this._ySetter)\r\n            this._ySetter();\r\n        this._y = value;\r\n    }\r\n}\r\nexports.CfPosition = CfPosition;\r\nclass CfSize {\r\n    constructor(w, h) {\r\n        this._w = \"0\";\r\n        this._h = \"0\";\r\n        if (w)\r\n            this.w = w;\r\n        if (h)\r\n            this.h = h;\r\n    }\r\n    get w() {\r\n        if (!!this._wGetter)\r\n            this._w = this._wGetter();\r\n        return this._w;\r\n    }\r\n    set w(value) {\r\n        if (!!this._wSetter)\r\n            this._wSetter();\r\n        this._w = value;\r\n    }\r\n    get h() {\r\n        if (!!this._hGetter)\r\n            this._h = this._hGetter();\r\n        return this._h;\r\n    }\r\n    set h(value) {\r\n        if (!!this._hSetter)\r\n            this._hSetter();\r\n        this._h = value;\r\n    }\r\n}\r\nexports.CfSize = CfSize;\r\nclass CfColor {\r\n    constructor(r, g, b) {\r\n        this.r = 0;\r\n        this.g = 0;\r\n        this.b = 0;\r\n        if (r)\r\n            this.r = r;\r\n        if (g)\r\n            this.g = g;\r\n        if (b)\r\n            this.b = b;\r\n    }\r\n    _getCssColor() {\r\n        return `rgb(${this.r}, ${this.g}, ${this.b})`;\r\n    }\r\n    darken(factor) {\r\n        this.r -= (this.r * factor) / 100.0;\r\n        this.g -= (this.g * factor) / 100.0;\r\n        this.b -= (this.b * factor) / 100.0;\r\n        return this;\r\n    }\r\n}\r\nexports.CfColor = CfColor;\r\nclass CfRadius {\r\n    constructor(radius) {\r\n        this.tl = 0;\r\n        this.tr = 0;\r\n        this.br = 0;\r\n        this.bl = 0;\r\n        if (!!radius) {\r\n            this.tl = this.tr = this.br = this.bl = radius;\r\n        }\r\n    }\r\n}\r\nexports.CfRadius = CfRadius;\r\nclass CfFont {\r\n    constructor(size, fontFamilly) {\r\n        this.size = \"14px\";\r\n        this.fontFamilly = \"Arial\";\r\n        if (!!size)\r\n            this.size = size;\r\n        if (!!fontFamilly)\r\n            this.fontFamilly = fontFamilly;\r\n    }\r\n    _getCssFont() {\r\n        return `${this.size} ${this.fontFamilly}`;\r\n    }\r\n}\r\nexports.CfFont = CfFont;\r\nclass CfRectangle {\r\n    constructor(position, size) {\r\n        this.position = new CfNumericPosition();\r\n        this.size = new CfNumericSize();\r\n        if (!!position)\r\n            this.position = position;\r\n        if (!!size)\r\n            this.size = size;\r\n    }\r\n    intersectsWithPoint(position) {\r\n        return (position.x > this.position.x && position.y > this.position.y &&\r\n            position.x < this.position.x + this.size.w && position.y < this.position.y + this.size.h);\r\n    }\r\n}\r\nexports.CfRectangle = CfRectangle;\r\nvar CfAlign;\r\n(function (CfAlign) {\r\n    CfAlign[CfAlign[\"None\"] = 0] = \"None\";\r\n    CfAlign[CfAlign[\"Left\"] = 1] = \"Left\";\r\n    CfAlign[CfAlign[\"Right\"] = 2] = \"Right\";\r\n    CfAlign[CfAlign[\"Top\"] = 3] = \"Top\";\r\n    CfAlign[CfAlign[\"TopLeft\"] = 4] = \"TopLeft\";\r\n    CfAlign[CfAlign[\"TopRight\"] = 5] = \"TopRight\";\r\n    CfAlign[CfAlign[\"Bottom\"] = 6] = \"Bottom\";\r\n    CfAlign[CfAlign[\"BottomLeft\"] = 7] = \"BottomLeft\";\r\n    CfAlign[CfAlign[\"BottomRight\"] = 8] = \"BottomRight\";\r\n    CfAlign[CfAlign[\"Center\"] = 9] = \"Center\";\r\n})(CfAlign = exports.CfAlign || (exports.CfAlign = {}));\r\nvar CfDirection;\r\n(function (CfDirection) {\r\n    CfDirection[CfDirection[\"None\"] = 0] = \"None\";\r\n    CfDirection[CfDirection[\"Up\"] = 1] = \"Up\";\r\n    CfDirection[CfDirection[\"Down\"] = 2] = \"Down\";\r\n    CfDirection[CfDirection[\"Left\"] = 3] = \"Left\";\r\n    CfDirection[CfDirection[\"Right\"] = 4] = \"Right\";\r\n})(CfDirection = exports.CfDirection || (exports.CfDirection = {}));\r\nclass CfSpaces {\r\n    constructor(left, right, top, bottom) {\r\n        this.left = 0;\r\n        this.right = 0;\r\n        this.top = 0;\r\n        this.bottom = 0;\r\n        if (!!left)\r\n            this.left = left;\r\n        if (!!right)\r\n            this.right = right;\r\n        if (!!top)\r\n            this.top = top;\r\n        if (!!bottom)\r\n            this.bottom = bottom;\r\n    }\r\n}\r\nexports.CfSpaces = CfSpaces;\r\nclass CfAnchor {\r\n    constructor(left, right, top, bottom) {\r\n        this.left = false;\r\n        this.right = false;\r\n        this.top = false;\r\n        this.bottom = false;\r\n        if (!!left)\r\n            this.left = left;\r\n        if (!!right)\r\n            this.right = right;\r\n        if (!!top)\r\n            this.top = top;\r\n        if (!!bottom)\r\n            this.bottom = bottom;\r\n    }\r\n}\r\nexports.CfAnchor = CfAnchor;\r\nvar CfContainerPositioningMode;\r\n(function (CfContainerPositioningMode) {\r\n    CfContainerPositioningMode[CfContainerPositioningMode[\"Pixels\"] = 0] = \"Pixels\";\r\n    CfContainerPositioningMode[CfContainerPositioningMode[\"Percent\"] = 1] = \"Percent\";\r\n})(CfContainerPositioningMode = exports.CfContainerPositioningMode || (exports.CfContainerPositioningMode = {}));\r\nfunction CfContainerPositioningModeToString(posMode) {\r\n    switch (posMode) {\r\n        case CfContainerPositioningMode.Pixels:\r\n            return 'px';\r\n        case CfContainerPositioningMode.Percent:\r\n            return '%';\r\n        default:\r\n            return '';\r\n    }\r\n}\r\nexports.CfContainerPositioningModeToString = CfContainerPositioningModeToString;\r\nclass CfContainerPositioningModeValuePair {\r\n    constructor() {\r\n        this.mode = CfContainerPositioningMode.Pixels;\r\n        this.value = 0;\r\n        this.changed = false;\r\n    }\r\n    // Receives for example: \"15\", \"15%\"\", \"15px\" ...\r\n    parseValue(inValue) {\r\n        //debugger;\r\n        let value = \"\";\r\n        if (typeof inValue === 'string' || inValue instanceof String)\r\n            value = inValue;\r\n        else\r\n            value = inValue.toString();\r\n        if (value.length <= 0)\r\n            throw `Invalid Positioning \"${value}\" (Can't be empty)`;\r\n        if (isNaN(value[0]))\r\n            throw `Invalid Positioning \"${value}\" (Must begin with a number)`;\r\n        // Small tool function\r\n        let isValidUnitCharacter = (str) => {\r\n            return str.length === 1 && (str.match(/[a-z]/i) || str == '%');\r\n        };\r\n        let numericPart = \"\";\r\n        let unitPart = \"\";\r\n        // Get the numeric part\r\n        let i = 0;\r\n        for (; i < value.length; i++) {\r\n            if (!isNaN(value[i]))\r\n                numericPart += value[i];\r\n            else\r\n                break;\r\n        }\r\n        // Get the unit part\r\n        for (; i < value.length; i++) {\r\n            if (isValidUnitCharacter(value[i]))\r\n                unitPart += value[i];\r\n            else\r\n                throw `Invalid Positioning Unit \"${unitPart}\" (Character Validation)`;\r\n        }\r\n        // Unit Check\r\n        switch (unitPart.toLowerCase()) {\r\n            case '':\r\n                this.mode = CfContainerPositioningMode.Pixels;\r\n                break;\r\n            case 'px':\r\n                this.mode = CfContainerPositioningMode.Pixels;\r\n                break;\r\n            case '%':\r\n                this.mode = CfContainerPositioningMode.Percent;\r\n                break;\r\n            default:\r\n                throw `Invalid Positioning Unit \"${unitPart}\" (Unit Checking)`;\r\n        }\r\n        // Numeric Conversion\r\n        this.value = parseInt(numericPart);\r\n        if (isNaN(this.value))\r\n            throw `Unable to parse positioning value \"${numericPart}\"`;\r\n        this.changed = true;\r\n        return false;\r\n    }\r\n}\r\nexports.CfContainerPositioningModeValuePair = CfContainerPositioningModeValuePair;\r\nclass CfContainerPositioningProperties {\r\n    constructor() {\r\n        // This is the base position and size of the object and is ALWAYS represented in pixels\r\n        this.position = new CfNumericPosition();\r\n        this.size = new CfNumericSize();\r\n        this.x = new CfContainerPositioningModeValuePair();\r\n        this.y = new CfContainerPositioningModeValuePair();\r\n        this.w = new CfContainerPositioningModeValuePair();\r\n        this.h = new CfContainerPositioningModeValuePair();\r\n    }\r\n    AnyUsingPercent() {\r\n        return this.x.mode == CfContainerPositioningMode.Percent || this.y.mode == CfContainerPositioningMode.Percent\r\n            || this.w.mode == CfContainerPositioningMode.Percent || this.h.mode == CfContainerPositioningMode.Percent;\r\n    }\r\n}\r\nexports.CfContainerPositioningProperties = CfContainerPositioningProperties;\r\nfunction CfGenerateUuidV4() {\r\n    // Based on broofa's answear from this:\r\n    // https://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\r\n        return v.toString(16);\r\n    });\r\n}\r\nexports.CfGenerateUuidV4 = CfGenerateUuidV4;\r\nfunction CfClone(obj) {\r\n    // Based on A. Levy's answear from this:\r\n    // https://stackoverflow.com/questions/728360/how-do-i-correctly-clone-a-javascript-object\r\n    var copy;\r\n    // Handle the 3 simple types, and null or undefined\r\n    if (null == obj || \"object\" != typeof obj)\r\n        return obj;\r\n    // Handle Date\r\n    if (obj instanceof Date) {\r\n        copy = new Date();\r\n        copy.setTime(obj.getTime());\r\n        return copy;\r\n    }\r\n    // Handle Array\r\n    if (obj instanceof Array) {\r\n        copy = [];\r\n        for (var i = 0, len = obj.length; i < len; i++) {\r\n            copy[i] = CfClone(obj[i]);\r\n        }\r\n        return copy;\r\n    }\r\n    // Handle Object\r\n    if (obj instanceof Object) {\r\n        copy = {};\r\n        for (var attr in obj) {\r\n            if (obj.hasOwnProperty(attr))\r\n                copy[attr] = CfClone(obj[attr]);\r\n        }\r\n        return copy;\r\n    }\r\n    throw new Error(\"Unable to copy obj! Its type isn't supported.\");\r\n}\r\nexports.CfClone = CfClone;\r\nfunction CfIsObject(item) {\r\n    // Based on Salakar and Rubens Mariuzzo answear from this:\r\n    // https://stackoverflow.com/questions/27936772/how-to-deep-merge-instead-of-shallow-merge\r\n    return (item && typeof item === 'object' && !Array.isArray(item));\r\n}\r\nexports.CfIsObject = CfIsObject;\r\n// Returns all prototypes from the object class and all their extended classes\r\nfunction CfGetPrototypeFamily(obj) {\r\n    let prototypes = [];\r\n    //\r\n    let cObj = obj;\r\n    // This is just to limit the maximum amount of iterations in case something goes wrong\r\n    for (let c = 0; c < 10; c++) {\r\n        if (!cObj)\r\n            return prototypes;\r\n        cObj = Object.getPrototypeOf(cObj);\r\n        if (!!cObj)\r\n            prototypes.push(cObj);\r\n    }\r\n}\r\nexports.CfGetPrototypeFamily = CfGetPrototypeFamily;\r\n// Returns the setter function\r\nfunction CfGetSetter(obj, prop) {\r\n    // This is necessary because the getOwnPropertyDescriptor only gets the descriptor from a single class\r\n    // So to check if a setter exists in extended classes it's necessary to get all the prototypes and check agains each one\r\n    let protoFamily = CfGetPrototypeFamily(obj);\r\n    for (let cPrototype of protoFamily) {\r\n        if (!cPrototype)\r\n            continue;\r\n        let descriptor = Object.getOwnPropertyDescriptor(cPrototype, prop);\r\n        if (!descriptor)\r\n            continue;\r\n        return descriptor['set'];\r\n    }\r\n    return undefined;\r\n}\r\nexports.CfGetSetter = CfGetSetter;\r\nfunction CfMergeDeep(target, ...sources) {\r\n    // Based on Salakar and Rubens Mariuzzo answear from this but with some modification to accept setters:\r\n    // https://stackoverflow.com/questions/27936772/how-to-deep-merge-instead-of-shallow-merge\r\n    if (!sources.length)\r\n        return target;\r\n    const source = sources.shift();\r\n    if (CfIsObject(target) && CfIsObject(source)) {\r\n        for (const key in source) {\r\n            // Check if the objects's property is a setter (if CfGetSetter returns null it's not a setter)\r\n            let propSetter = CfGetSetter(target, key);\r\n            if (!!propSetter) {\r\n                // Setter (Object, but let the setter decide what to do)\r\n                propSetter.bind(target)(source[key]);\r\n            }\r\n            else if (CfIsObject(source[key])) {\r\n                // Object\r\n                if (!target[key])\r\n                    Object.assign(target, { [key]: {} });\r\n                CfMergeDeep(target[key], source[key]);\r\n            }\r\n            else {\r\n                // Value\r\n                Object.assign(target, { [key]: source[key] });\r\n            }\r\n        }\r\n    }\r\n    return CfMergeDeep(target, ...sources);\r\n}\r\nexports.CfMergeDeep = CfMergeDeep;\r\n\n\n//# sourceURL=webpack:///C:/Projects/cornflower/lib/src/core/CfUtils.ts?");

/***/ }),

/***/ "../../lib/src/core/CfWindow.ts":
/*!*******************************************************!*\
  !*** C:/Projects/cornflower/lib/src/core/CfWindow.ts ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst CfContainer_1 = __webpack_require__(/*! ../components/CfContainer */ \"../../lib/src/components/CfContainer.ts\");\r\nconst CfUtils_1 = __webpack_require__(/*! ./CfUtils */ \"../../lib/src/core/CfUtils.ts\");\r\nclass CfWindow extends CfContainer_1.default {\r\n    constructor() {\r\n        super();\r\n        this.backgroundColor = new CfUtils_1.CfColor(245, 246, 247);\r\n        this.borderWidth = 0;\r\n    }\r\n}\r\nexports.default = CfWindow;\r\n\n\n//# sourceURL=webpack:///C:/Projects/cornflower/lib/src/core/CfWindow.ts?");

/***/ }),

/***/ "../../lib/src/models/CfMenuItem.ts":
/*!***********************************************************!*\
  !*** C:/Projects/cornflower/lib/src/models/CfMenuItem.ts ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nclass CfMenuItem {\r\n    constructor(text, subitems) {\r\n        this.text = \"Placeholder\";\r\n        this.subitems = [];\r\n        if (!!text)\r\n            this.text = text;\r\n        if (!!subitems)\r\n            this.subitems = subitems;\r\n    }\r\n}\r\nexports.default = CfMenuItem;\r\n\n\n//# sourceURL=webpack:///C:/Projects/cornflower/lib/src/models/CfMenuItem.ts?");

/***/ }),

/***/ "./src/components/Window1.ts":
/*!***********************************!*\
  !*** ./src/components/Window1.ts ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Window1 = void 0;\r\nconst CfUtils_1 = __webpack_require__(/*! ../../../../lib/src/core/CfUtils */ \"../../lib/src/core/CfUtils.ts\");\r\nconst CfWindow_1 = __webpack_require__(/*! ../../../../lib/src/core/CfWindow */ \"../../lib/src/core/CfWindow.ts\");\r\nconst CfButton_1 = __webpack_require__(/*! ../../../../lib/src/components/CfButton */ \"../../lib/src/components/CfButton.ts\");\r\nconst CfMenuItem_1 = __webpack_require__(/*! ../../../../lib/src/models/CfMenuItem */ \"../../lib/src/models/CfMenuItem.ts\");\r\nconst CfMenuBar_1 = __webpack_require__(/*! ../../../../lib/src/components/menus/CfMenuBar */ \"../../lib/src/components/menus/CfMenuBar.ts\");\r\nconst CfContextMenu_1 = __webpack_require__(/*! ../../../../lib/src/components/menus/CfContextMenu */ \"../../lib/src/components/menus/CfContextMenu.ts\");\r\nclass Window1 extends CfWindow_1.default {\r\n    constructor() {\r\n        super();\r\n        this.counter = 0;\r\n        this.counter = 0;\r\n        this.createComponents();\r\n    }\r\n    createComponents() {\r\n        let cMenuBar = new CfMenuBar_1.default();\r\n        cMenuBar.addItem(new CfMenuItem_1.default('File', [\r\n            new CfMenuItem_1.default('New', [\r\n                new CfMenuItem_1.default('Project'),\r\n                new CfMenuItem_1.default('File'),\r\n                new CfMenuItem_1.default('Resource')\r\n            ]),\r\n            new CfMenuItem_1.default('Open File'),\r\n            new CfMenuItem_1.default('Save File'),\r\n            new CfMenuItem_1.default('Preferences', [\r\n                new CfMenuItem_1.default('Settings'),\r\n                new CfMenuItem_1.default('Themes', [\r\n                    new CfMenuItem_1.default('Choose Local Theme'),\r\n                    new CfMenuItem_1.default('Explorer Themes')\r\n                ])\r\n            ])\r\n        ]));\r\n        cMenuBar.addItem(new CfMenuItem_1.default('Edit', [\r\n            new CfMenuItem_1.default('Undo'),\r\n            new CfMenuItem_1.default('Redo'),\r\n            new CfMenuItem_1.default('Cut'),\r\n            new CfMenuItem_1.default('Copy'),\r\n            new CfMenuItem_1.default('Paste')\r\n        ]));\r\n        cMenuBar.addItem(new CfMenuItem_1.default('Help', [\r\n            new CfMenuItem_1.default('About')\r\n        ]));\r\n        this.addComponent(cMenuBar);\r\n        // ===========================================\r\n        let btnTest = new CfButton_1.default({ textComponent: { text: 'File' }, size: new CfUtils_1.CfSize('400', '35') });\r\n        btnTest.positioningProperties.position = new CfUtils_1.CfNumericPosition(100, 100);\r\n        //btnTest.size = new CfSize('300', '35');\r\n        this.addComponent(btnTest);\r\n        //this.addComponent(new CfText({align: (CfAlign as any).Center, text: 'Teste' }))\r\n        // let theme = {\r\n        //     backgroundColor: new CfColor(40, 40, 40),\r\n        //     size: new CfSize(150, 24),\r\n        //     textComponent: {\r\n        //         align: CfAlign.Left,\r\n        //         margin: { left: 10 },\r\n        //         textFont: { size: '12px' }\r\n        //     }\r\n        // };\r\n        let cCtxMenu = new CfContextMenu_1.default();\r\n        cCtxMenu.addItem(new CfMenuItem_1.default('New File'));\r\n        cCtxMenu.addItem(new CfMenuItem_1.default('Open', [\r\n            new CfMenuItem_1.default('Open File'),\r\n            new CfMenuItem_1.default('Open Project')\r\n        ]));\r\n        cCtxMenu.addItem(new CfMenuItem_1.default('Save', [\r\n            new CfMenuItem_1.default('Save File'),\r\n            new CfMenuItem_1.default('Save Project')\r\n        ]));\r\n        cCtxMenu.addItem(new CfMenuItem_1.default('Preferences', [\r\n            new CfMenuItem_1.default('Settings'),\r\n            new CfMenuItem_1.default('Themes', [\r\n                new CfMenuItem_1.default('Choose Local Theme'),\r\n                new CfMenuItem_1.default('Explore Themes Online')\r\n            ])\r\n        ]));\r\n        cCtxMenu.addItem(new CfMenuItem_1.default('Exit'));\r\n        this.addComponent(cCtxMenu);\r\n        // let cStackContainer = new CfStackContainer();\r\n        // cStackContainer.name = \"ContextMenu\";\r\n        // cStackContainer.enabled = false;\r\n        // cStackContainer.position = new CfPosition(10, 300);\r\n        // cStackContainer.enableBackgroundColor = true;\r\n        // cStackContainer.backgroundColor = new CfColor(25, 25, 25);\r\n        // cStackContainer.padding = new CfSpaces(2, 2, 2, 2);\r\n        let textTest = new CfButton_1.default({ textComponent: { text: \"Batata\" }, align: CfUtils_1.CfAlign.Center, backgroundColor: new CfUtils_1.CfColor(255, 0, 0) });\r\n        textTest.onClick.addListener(() => {\r\n            console.log(\"CLICADO\");\r\n        });\r\n        this.addComponent(textTest);\r\n        // cStackContainer.addComponent(new CfButton({textComponent: {text: 'New'}}, theme));\r\n        // cStackContainer.addComponent(new CfButton({textComponent: {text: 'Open File'}}, theme));\r\n        // cStackContainer.addComponent(new CfButton({textComponent: {text: 'Save File'}}, theme));\r\n        // cStackContainer.addComponent(new CfButton({textComponent: {text: 'Exit'}}, theme));\r\n        // this.addComponent(cStackContainer);\r\n        this.onMouseDown.addListener((eventArgs) => {\r\n            if (eventArgs.button == 0) { // Left Click\r\n                cCtxMenu.hide();\r\n            }\r\n            if (eventArgs.button == 2) { // Right Click\r\n                let menuPosition = this.projectPositionToLocalPosition(this.lastMousePosition);\r\n                cCtxMenu.positioningProperties.position = menuPosition;\r\n                cCtxMenu.show();\r\n            }\r\n        });\r\n    }\r\n}\r\nexports.Window1 = Window1;\r\n\n\n//# sourceURL=webpack:///./src/components/Window1.ts?");

/***/ }),

/***/ "./src/main.ts":
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst CfCore_1 = __webpack_require__(/*! ../../../lib/dist/core/CfCore */ \"../../lib/dist/core/CfCore.js\");\r\nconst Window1_1 = __webpack_require__(/*! ./components/Window1 */ \"./src/components/Window1.ts\");\r\ndocument.addEventListener(\"DOMContentLoaded\", function (e) {\r\n    CfCore_1.CreateWebViewport(new Window1_1.Window1());\r\n});\r\n\n\n//# sourceURL=webpack:///./src/main.ts?");

/***/ })

/******/ });